// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// subdistsmult
arma::mat subdistsmult(const Rcpp::List& subcentroids, const Rcpp::List& query_chunks, const int& M, const int& k, const int& cellnum);
RcppExport SEXP _scmap_subdistsmult(SEXP subcentroidsSEXP, SEXP query_chunksSEXP, SEXP MSEXP, SEXP kSEXP, SEXP cellnumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type subcentroids(subcentroidsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type query_chunks(query_chunksSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type cellnum(cellnumSEXP);
    rcpp_result_gen = Rcpp::wrap(subdistsmult(subcentroids, query_chunks, M, k, cellnum));
    return rcpp_result_gen;
END_RCPP
}
// nearcs
Rcpp::List nearcs(const int& w, const int& M, const arma::Col<int> clus_ind, const arma::mat& subclusters, const arma::mat& dists, const int& len);
RcppExport SEXP _scmap_nearcs(SEXP wSEXP, SEXP MSEXP, SEXP clus_indSEXP, SEXP subclustersSEXP, SEXP distsSEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int> >::type clus_ind(clus_indSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type subclusters(subclustersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< const int& >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(nearcs(w, M, clus_ind, subclusters, dists, len));
    return rcpp_result_gen;
END_RCPP
}
// normalise
arma::mat normalise(const arma::mat& dat);
RcppExport SEXP _scmap_normalise(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(normalise(dat));
    return rcpp_result_gen;
END_RCPP
}
// NNfirst
Rcpp::List NNfirst(const int& w, const int& k, const Rcpp::List& subcentroids, const arma::mat& subclusters, const Rcpp::List& query_chunks, const int& M, const arma::vec& SqNorm);
RcppExport SEXP _scmap_NNfirst(SEXP wSEXP, SEXP kSEXP, SEXP subcentroidsSEXP, SEXP subclustersSEXP, SEXP query_chunksSEXP, SEXP MSEXP, SEXP SqNormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type subcentroids(subcentroidsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type subclusters(subclustersSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type query_chunks(query_chunksSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SqNorm(SqNormSEXP);
    rcpp_result_gen = Rcpp::wrap(NNfirst(w, k, subcentroids, subclusters, query_chunks, M, SqNorm));
    return rcpp_result_gen;
END_RCPP
}
// NNmult
Rcpp::List NNmult(const int& w, const int& k, const Rcpp::List& subcentroids, const arma::mat& subclusters, const Rcpp::List& query_chunks, const int& M, const arma::vec& SqNorm, const arma::mat& best_cells_so_far, const Rcpp::NumericMatrix& best_distances_so_far, arma::mat dataset_inds, const int& dat_num);
RcppExport SEXP _scmap_NNmult(SEXP wSEXP, SEXP kSEXP, SEXP subcentroidsSEXP, SEXP subclustersSEXP, SEXP query_chunksSEXP, SEXP MSEXP, SEXP SqNormSEXP, SEXP best_cells_so_farSEXP, SEXP best_distances_so_farSEXP, SEXP dataset_indsSEXP, SEXP dat_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type subcentroids(subcentroidsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type subclusters(subclustersSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type query_chunks(query_chunksSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SqNorm(SqNormSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type best_cells_so_far(best_cells_so_farSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type best_distances_so_far(best_distances_so_farSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dataset_inds(dataset_indsSEXP);
    Rcpp::traits::input_parameter< const int& >::type dat_num(dat_numSEXP);
    rcpp_result_gen = Rcpp::wrap(NNmult(w, k, subcentroids, subclusters, query_chunks, M, SqNorm, best_cells_so_far, best_distances_so_far, dataset_inds, dat_num));
    return rcpp_result_gen;
END_RCPP
}
// EuclSqNorm
Rcpp::NumericVector EuclSqNorm(const arma::mat& dat);
RcppExport SEXP _scmap_EuclSqNorm(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(EuclSqNorm(dat));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _scmap_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _scmap_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _scmap_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _scmap_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scmap_subdistsmult", (DL_FUNC) &_scmap_subdistsmult, 5},
    {"_scmap_nearcs", (DL_FUNC) &_scmap_nearcs, 6},
    {"_scmap_normalise", (DL_FUNC) &_scmap_normalise, 1},
    {"_scmap_NNfirst", (DL_FUNC) &_scmap_NNfirst, 7},
    {"_scmap_NNmult", (DL_FUNC) &_scmap_NNmult, 11},
    {"_scmap_EuclSqNorm", (DL_FUNC) &_scmap_EuclSqNorm, 1},
    {"_scmap_rcpparma_hello_world", (DL_FUNC) &_scmap_rcpparma_hello_world, 0},
    {"_scmap_rcpparma_outerproduct", (DL_FUNC) &_scmap_rcpparma_outerproduct, 1},
    {"_scmap_rcpparma_innerproduct", (DL_FUNC) &_scmap_rcpparma_innerproduct, 1},
    {"_scmap_rcpparma_bothproducts", (DL_FUNC) &_scmap_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_scmap(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
